/*
 * Copyright Â© 2018  Ebrahim Byagowi
 *
 *  This is part of HarfBuzz, a text shaping library.
 *
 * Permission is hereby granted, without written agreement and without
 * license or royalty fees, to use, copy, modify, and distribute this
 * software and its documentation for any purpose, provided that the
 * above copyright notice and the following two paragraphs appear in
 * all copies of this software.
 *
 * IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR
 * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
 * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN
 * IF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 *
 * THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 * FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
 * ON AN "AS IS" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO
 * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
 */

#ifndef RB_AAT_H_IN
#error "Include <hb-aat.h> instead."
#endif

#ifndef RB_AAT_LAYOUT_H
#define RB_AAT_LAYOUT_H

#include "hb.h"

RB_BEGIN_DECLS

typedef enum {
    RB_AAT_LAYOUT_FEATURE_TYPE_INVALID = 0xFFFF,

    RB_AAT_LAYOUT_FEATURE_TYPE_ALL_TYPOGRAPHIC = 0,
    RB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES = 1,
    RB_AAT_LAYOUT_FEATURE_TYPE_CURISVE_CONNECTION = 2,
    RB_AAT_LAYOUT_FEATURE_TYPE_LETTER_CASE = 3,
    RB_AAT_LAYOUT_FEATURE_TYPE_VERTICAL_SUBSTITUTION = 4,
    RB_AAT_LAYOUT_FEATURE_TYPE_LINGUISTIC_REARRANGEMENT = 5,
    RB_AAT_LAYOUT_FEATURE_TYPE_NUMBER_SPACING = 6,
    RB_AAT_LAYOUT_FEATURE_TYPE_SMART_SWASH_TYPE = 8,
    RB_AAT_LAYOUT_FEATURE_TYPE_DIACRITICS_TYPE = 9,
    RB_AAT_LAYOUT_FEATURE_TYPE_VERTICAL_POSITION = 10,
    RB_AAT_LAYOUT_FEATURE_TYPE_FRACTIONS = 11,
    RB_AAT_LAYOUT_FEATURE_TYPE_OVERLAPPING_CHARACTERS_TYPE = 13,
    RB_AAT_LAYOUT_FEATURE_TYPE_TYPOGRAPHIC_EXTRAS = 14,
    RB_AAT_LAYOUT_FEATURE_TYPE_MATHEMATICAL_EXTRAS = 15,
    RB_AAT_LAYOUT_FEATURE_TYPE_ORNAMENT_SETS_TYPE = 16,
    RB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_ALTERNATIVES = 17,
    RB_AAT_LAYOUT_FEATURE_TYPE_DESIGN_COMPLEXITY_TYPE = 18,
    RB_AAT_LAYOUT_FEATURE_TYPE_STYLE_OPTIONS = 19,
    RB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE = 20,
    RB_AAT_LAYOUT_FEATURE_TYPE_NUMBER_CASE = 21,
    RB_AAT_LAYOUT_FEATURE_TYPE_TEXT_SPACING = 22,
    RB_AAT_LAYOUT_FEATURE_TYPE_TRANSLITERATION = 23,
    RB_AAT_LAYOUT_FEATURE_TYPE_ANNOTATION_TYPE = 24,
    RB_AAT_LAYOUT_FEATURE_TYPE_KANA_SPACING_TYPE = 25,
    RB_AAT_LAYOUT_FEATURE_TYPE_IDEOGRAPHIC_SPACING_TYPE = 26,
    RB_AAT_LAYOUT_FEATURE_TYPE_UNICODE_DECOMPOSITION_TYPE = 27,
    RB_AAT_LAYOUT_FEATURE_TYPE_RUBY_KANA = 28,
    RB_AAT_LAYOUT_FEATURE_TYPE_CJK_SYMBOL_ALTERNATIVES_TYPE = 29,
    RB_AAT_LAYOUT_FEATURE_TYPE_IDEOGRAPHIC_ALTERNATIVES_TYPE = 30,
    RB_AAT_LAYOUT_FEATURE_TYPE_CJK_VERTICAL_ROMAN_PLACEMENT_TYPE = 31,
    RB_AAT_LAYOUT_FEATURE_TYPE_ITALIC_CJK_ROMAN = 32,
    RB_AAT_LAYOUT_FEATURE_TYPE_CASE_SENSITIVE_LAYOUT = 33,
    RB_AAT_LAYOUT_FEATURE_TYPE_ALTERNATE_KANA = 34,
    RB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES = 35,
    RB_AAT_LAYOUT_FEATURE_TYPE_CONTEXTUAL_ALTERNATIVES = 36,
    RB_AAT_LAYOUT_FEATURE_TYPE_LOWER_CASE = 37,
    RB_AAT_LAYOUT_FEATURE_TYPE_UPPER_CASE = 38,
    RB_AAT_LAYOUT_FEATURE_TYPE_LANGUAGE_TAG_TYPE = 39,
    RB_AAT_LAYOUT_FEATURE_TYPE_CJK_ROMAN_SPACING_TYPE = 103,

    _RB_AAT_LAYOUT_FEATURE_TYPE_MAX_VALUE = RB_TAG_MAX_SIGNED /*< skip >*/
} rb_aat_layout_feature_type_t;

/**
 * rb_aat_layout_feature_selector_t:
 *
 *
 * Since: 2.2.0
 */
typedef enum {
    RB_AAT_LAYOUT_FEATURE_SELECTOR_SMALL_CAPS = 3,                  /* deprecated */
    RB_AAT_LAYOUT_FEATURE_SELECTOR_LOWER_CASE_SMALL_CAPS = 1,
} rb_aat_layout_feature_selector_t;

typedef unsigned int rb_ot_name_id_t;

#define RB_AAT_LAYOUT_NO_SELECTOR_INDEX 0xFFFFu

/*
 * morx/mort
 */

RB_EXTERN rb_bool_t rb_aat_layout_has_substitution(rb_face_t *face);

RB_EXTERN void rb_aat_layout_substitute(const rb_shape_plan_t *plan, rb_face_t *face, rb_buffer_t *buffer);

RB_EXTERN void rb_aat_layout_zero_width_deleted_glyphs(rb_buffer_t *buffer);

RB_EXTERN void rb_aat_layout_remove_deleted_glyphs(rb_buffer_t *buffer);

/*
 * trak
 */

RB_EXTERN rb_bool_t rb_aat_layout_has_tracking(rb_face_t *face);

RB_EXTERN void rb_aat_layout_track(const rb_shape_plan_t *plan, rb_face_t *face, rb_buffer_t *buffer);

RB_END_DECLS

#endif /* RB_AAT_LAYOUT_H */
